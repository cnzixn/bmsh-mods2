require("stategraphs/commonstates")

local actionhandlers=
{
	
}

local events=
{

}

local states=
{
	State{
		name = "idle",
		tags = {"idle"},
		onenter = function(inst, playanim)
            --inst.Physics:Stop()
			
			--Sync with paintable components
			SyncPlayAnimation(inst, "closed", true, playanim)
		end,

	},
	
	State{
		name = "open",
		tags = {"idle", "open"},
		onenter = function(inst, playanim)
            --inst.Physics:Stop()
			
			--Sync with paintable components
			SyncPlayAnimation(inst, "open", true, playanim)
		end,
	},

	State{
		name = "opening",
		tags = {"busy", "opening"},
		onenter = function(inst)
			--inst.SoundEmitter:PlaySound("dontstarve/common/teleportworm/open", "wormhole_opening")
			
			--Sync with paintable components
			SyncPlayAnimation(inst, "opening", false)
		end,

		events=
		{
			EventHandler("animover", function(inst)
				inst.sg:GoToState("open")
			end),
		},
	},
		
	State{
		name = "closing",
		tags = {"busy"},
		onenter = function(inst)
			--inst.SoundEmitter:PlaySound("dontstarve/common/teleportworm/close", "wormhole_closing")
			
			--Sync with paintable components
			SyncPlayAnimation(inst, "closing", false)
		end,

		events=
		{
			EventHandler("animover", function(inst)
				inst.sg:GoToState("idle")
			end),
		},
	},
	
	State{
		name = "build",
		tags = {"busy"},
		onenter = function(inst)
			--Sync with paintable components
			SyncPlayAnimation(inst, "closed", false)
		end,
		
		events=
		{
			EventHandler("animover", function(inst)
				inst.sg:GoToState("closed")
			end),
		},
	},

	
	State{
		name = "hit",
		tags = {"hit"},
		onenter = function(inst)
			--Sync with paintable components
			SyncPlayAnimation(inst, "hit", false)
		end,
		
		events=
		{
			EventHandler("animover", function(inst)
				inst.sg:GoToState("closed")
			end),
		},
	},
	
	State{
		name = "place",
		tags = {"busy"},
		onenter = function(inst)
			inst.AnimState:PlayAnimation("closed")
			
			--Sync with paintable components
			SyncPlayAnimation(inst, animation, doloop, playanim)
		end,
		
		events=
		{
			EventHandler("animover", function(inst)
				inst.sg:GoToState("closed")
			end),
		},
	},
}

function SyncPlayAnimation(inst, animation, doloop, playanim)
	if playanim then
		--PlayAnim first
		inst.AnimState:PlayAnimation(playanim, doloop or false)
		inst.components.paintable:PlayAnimation(playanim, doloop or false)
		
		
		--Push second
		inst.AnimState:PushAnimation(animation, doloop or false)
		inst.components.paintable:PushAnimation(animation, doloop or false)
	else
		inst.AnimState:PlayAnimation(animation, doloop or false)
		inst.components.paintable:PlayAnimation(animation, doloop or false)
	end
end

return StateGraph("tunnel", states, events, "idle", actionhandlers)
